from enum import Enum
from plum import dispatch
from typing import TypeVar,Union,Generic,List,Tuple
from spire.pdf.common import *
from spire.pdf import *
from ctypes import *
import abc

class PdfStringFormat (SpireObject) :
    """
    Represents the text layout information.
    """
    @dispatch
    def __init__(self):
        GetDllLibPdf().PdfStringFormat_CreatePdfStringFormat.restype = c_void_p
        intPtr = CallCFunction(GetDllLibPdf().PdfStringFormat_CreatePdfStringFormat)
        super(PdfStringFormat, self).__init__(intPtr)

    @dispatch
    def __init__(self, alignment:PdfTextAlignment, lineAlignment:PdfVerticalAlignment):
        enumAlignment:c_int = alignment.value
        enumVerticalAlignment:c_int = lineAlignment.value

        GetDllLibPdf().PdfStringFormat_CreatePdfStringFormatAL.argtypes=[c_int,c_int]
        GetDllLibPdf().PdfStringFormat_CreatePdfStringFormatAL.restype = c_void_p
        intPtr = CallCFunction(GetDllLibPdf().PdfStringFormat_CreatePdfStringFormatAL,enumAlignment,enumVerticalAlignment)
        super(PdfStringFormat, self).__init__(intPtr)

    @dispatch
    def __init__(self, alignment:PdfTextAlignment):
        enumAlignment:c_int = alignment.value

        GetDllLibPdf().PdfStringFormat_CreatePdfStringFormatA.argtypes=[c_int]
        GetDllLibPdf().PdfStringFormat_CreatePdfStringFormatA.restype = c_void_p
        intPtr = CallCFunction(GetDllLibPdf().PdfStringFormat_CreatePdfStringFormatA,enumAlignment)
        super(PdfStringFormat, self).__init__(intPtr)

    @dispatch
    def __init__(self, columnFormat:str):

        GetDllLibPdf().PdfStringFormat_CreatePdfStringFormatC.argtypes=[c_wchar_p]
        GetDllLibPdf().PdfStringFormat_CreatePdfStringFormatC.restype = c_void_p
        intPtr = CallCFunction(GetDllLibPdf().PdfStringFormat_CreatePdfStringFormatC,columnFormat)
        super(PdfStringFormat, self).__init__(intPtr)

    @property

    def Alignment(self)->'PdfTextAlignment':
        """
        Gets or sets the text alignment.
        """
        GetDllLibPdf().PdfStringFormat_get_Alignment.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_Alignment.restype=c_int
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_Alignment,self.Ptr)
        objwraped = PdfTextAlignment(ret)
        return objwraped

    @Alignment.setter
    def Alignment(self, value:'PdfTextAlignment'):
        GetDllLibPdf().PdfStringFormat_set_Alignment.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_Alignment,self.Ptr, value.value)

    @property

    def LineAlignment(self)->'PdfVerticalAlignment':
        """
        Gets or sets the vertical text alignment.
        """
        GetDllLibPdf().PdfStringFormat_get_LineAlignment.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_LineAlignment.restype=c_int
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_LineAlignment,self.Ptr)
        objwraped = PdfVerticalAlignment(ret)
        return objwraped

    @LineAlignment.setter
    def LineAlignment(self, value:'PdfVerticalAlignment'):
        GetDllLibPdf().PdfStringFormat_set_LineAlignment.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_LineAlignment,self.Ptr, value.value)

    @property
    def RightToLeft(self)->bool:
        """
        Gets or sets the value that indicates text direction mode.
<remarks>Note, that this property doesn't change any alignment of the text. 
             property should be set manually to align the text. This property just enables or disables
            support of right to left approach. 
            If the value is False, the text won't be checked for right to left symbols occurrence.</remarks>
        """
        GetDllLibPdf().PdfStringFormat_get_RightToLeft.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_RightToLeft.restype=c_bool
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_RightToLeft,self.Ptr)
        return ret

    @RightToLeft.setter
    def RightToLeft(self, value:bool):
        GetDllLibPdf().PdfStringFormat_set_RightToLeft.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_RightToLeft,self.Ptr, value)

    @property
    def CharacterSpacing(self)->float:
        """
        Gets or sets value that indicates a size among the characters in the text.
            When the glyph for each character in the string is rendered, this value is
            added to the the glyphs displacement.
<remarks>
            Default value is 0.</remarks>
        """
        GetDllLibPdf().PdfStringFormat_get_CharacterSpacing.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_CharacterSpacing.restype=c_float
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_CharacterSpacing,self.Ptr)
        return ret

    @CharacterSpacing.setter
    def CharacterSpacing(self, value:float):
        GetDllLibPdf().PdfStringFormat_set_CharacterSpacing.argtypes=[c_void_p, c_float]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_CharacterSpacing,self.Ptr, value)

    @property
    def WordSpacing(self)->float:
        """
        Gets or sets value that indicates a size among the words in the text.
            Word spacing works the same way as character spacing but applies only to the
            space character, code 32.
<remarks>Default value is 0.</remarks>
        """
        GetDllLibPdf().PdfStringFormat_get_WordSpacing.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_WordSpacing.restype=c_float
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_WordSpacing,self.Ptr)
        return ret

    @WordSpacing.setter
    def WordSpacing(self, value:float):
        GetDllLibPdf().PdfStringFormat_set_WordSpacing.argtypes=[c_void_p, c_float]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_WordSpacing,self.Ptr, value)

    @property
    def LineSpacing(self)->float:
        """
        Gets or sets value that indicates the vertical distance between the baselines of adjacent lines of text.
<remarks>Default value is 0.</remarks>
        """
        GetDllLibPdf().PdfStringFormat_get_LineSpacing.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_LineSpacing.restype=c_float
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_LineSpacing,self.Ptr)
        return ret

    @LineSpacing.setter
    def LineSpacing(self, value:float):
        GetDllLibPdf().PdfStringFormat_set_LineSpacing.argtypes=[c_void_p, c_float]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_LineSpacing,self.Ptr, value)

    @property
    def ClipPath(self)->bool:
        """
        Gets or sets a value indicating whether the text
            should be a part of the clipping path.
        """
        GetDllLibPdf().PdfStringFormat_get_ClipPath.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_ClipPath.restype=c_bool
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_ClipPath,self.Ptr)
        return ret

    @ClipPath.setter
    def ClipPath(self, value:bool):
        GetDllLibPdf().PdfStringFormat_set_ClipPath.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_ClipPath,self.Ptr, value)

    @property

    def SubSuperScript(self)->'PdfSubSuperScript':
        """
        Gets or sets value indicating whether the text is in subscript or superscript mode.
        """
        GetDllLibPdf().PdfStringFormat_get_SubSuperScript.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_SubSuperScript.restype=c_int
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_SubSuperScript,self.Ptr)
        objwraped = PdfSubSuperScript(ret)
        return objwraped

    @SubSuperScript.setter
    def SubSuperScript(self, value:'PdfSubSuperScript'):
        GetDllLibPdf().PdfStringFormat_set_SubSuperScript.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_SubSuperScript,self.Ptr, value.value)

    @property
    def ParagraphIndent(self)->float:
        """
        Gets or sets the indent of the first line in the paragraph.
        """
        GetDllLibPdf().PdfStringFormat_get_ParagraphIndent.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_ParagraphIndent.restype=c_float
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_ParagraphIndent,self.Ptr)
        return ret

    @ParagraphIndent.setter
    def ParagraphIndent(self, value:float):
        GetDllLibPdf().PdfStringFormat_set_ParagraphIndent.argtypes=[c_void_p, c_float]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_ParagraphIndent,self.Ptr, value)

    @property
    def LineLimit(self)->bool:
        """
        Only entire lines are laid out in the formatting rectangle.
            By default layout continues until the end of the text, 
            or until no more lines are visible as a result of clipping, whichever comes first. 
            Note that the default settings allow the last line to be partially obscured by a formatting rectangle that is not a whole multiple of the line height.
            To ensure that only whole lines are seen, specify this value and be careful to provide a formatting rectangle at least as tall as the height of one line.
        """
        GetDllLibPdf().PdfStringFormat_get_LineLimit.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_LineLimit.restype=c_bool
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_LineLimit,self.Ptr)
        return ret

    @LineLimit.setter
    def LineLimit(self, value:bool):
        GetDllLibPdf().PdfStringFormat_set_LineLimit.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_LineLimit,self.Ptr, value)

    @property
    def MeasureTrailingSpaces(self)->bool:
        """
        Includes the trailing space at the end of each line.
            By default the boundary rectangle returned by the MeasureString method of PdfFont excludes the space at the end of each line.
            Set this flag to include that space in measurement.
        """
        GetDllLibPdf().PdfStringFormat_get_MeasureTrailingSpaces.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_MeasureTrailingSpaces.restype=c_bool
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_MeasureTrailingSpaces,self.Ptr)
        return ret

    @MeasureTrailingSpaces.setter
    def MeasureTrailingSpaces(self, value:bool):
        GetDllLibPdf().PdfStringFormat_set_MeasureTrailingSpaces.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_MeasureTrailingSpaces,self.Ptr, value)

    @property
    def NoClip(self)->bool:
        """
        Overhanging parts of glyphs, 
            and unwrapped text reaching outside the formatting rectangle are allowed to show. 
            By default all text and glyph parts reaching outside the formatting rectangle are clipped.
        """
        GetDllLibPdf().PdfStringFormat_get_NoClip.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_NoClip.restype=c_bool
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_NoClip,self.Ptr)
        return ret

    @NoClip.setter
    def NoClip(self, value:bool):
        GetDllLibPdf().PdfStringFormat_set_NoClip.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_NoClip,self.Ptr, value)

    @property

    def WordWrap(self)->'PdfWordWrapType':
        """
        Gets or sets value indicating type of the text wrapping.
        """
        GetDllLibPdf().PdfStringFormat_get_WordWrap.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_get_WordWrap.restype=c_int
        ret = CallCFunction(GetDllLibPdf().PdfStringFormat_get_WordWrap,self.Ptr)
        objwraped = PdfWordWrapType(ret)
        return objwraped

    @WordWrap.setter
    def WordWrap(self, value:'PdfWordWrapType'):
        GetDllLibPdf().PdfStringFormat_set_WordWrap.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibPdf().PdfStringFormat_set_WordWrap,self.Ptr, value.value)


    def Clone(self)->'SpireObject':
        """
        Clones the object.
		
        Returns:
            The new created object.
        """
        GetDllLibPdf().PdfStringFormat_Clone.argtypes=[c_void_p]
        GetDllLibPdf().PdfStringFormat_Clone.restype=c_void_p
        intPtr = CallCFunction(GetDllLibPdf().PdfStringFormat_Clone,self.Ptr)
        ret = None if intPtr==None else SpireObject(intPtr)
        return ret


